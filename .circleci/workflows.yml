version: 2.1

orbs:
  macos: circleci/macos@2

parameters:
  source-common-modified:
    type: boolean
    default: false
  source-core-modified:
    type: boolean
    default: false
  source-surface-modified:
    type: boolean
    default: false
  source-target-modified:
    type: boolean
    default: false

  debug-workflow:
    type: boolean
    default: true
  active-directory:
    type: string
    default: "/Users/distiller/project/"
fastlane:
    - &all_lanes [adhoc, unit_test]

executors:
  ios:
    macos:
      xcode: 13.3
    working_directory: /Users/distiller/project
    shell: /bin/bash --login -eo pipefail
    environment:
      FL_OUTPUT_DIR: output
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    
commands:
  print:
    parameters:
      message:
        type: string
    steps:
      - run: echo << parameters.message >>
  install_cocoapods_dependencies:
    description: "Install Dependencies"
    parameters:
      project-directory:
        type: string
    steps:
      - run:
          name: Install CocoaPods
          command: bundle exec pod install --project-directory=./<< parameters.project-directory >>
  install_bundle_dependencies:
    description: "Install Bundle Dependencies"
    parameters:
      project-directory:
        type: string
    steps:
      - run:
          name: Install Bundle Dependencies
          command: bundle config set --local path 'vendor/bundle' && cd << parameters.project-directory >> && bundle install
  run_fastlane_cmd:
    description: "Get dependencies, run specified Fastlane lane, store artifacts"
    parameters:
      lane:
        type: enum
        enum: *all_lanes
      cached:
        type: boolean
        default: true
      distributes:
        type: boolean
        default: false
      project-directory:
        type: string
      parameters:
        type: string
        default: ""
    steps:
      # Git
      - checkout
      - install_bundle_dependencies:
          project-directory: << parameters.project-directory >>
      - install_cocoapods_dependencies:
          project-directory: << parameters.project-directory >>
      - run:
          name: Invoke Fastlane
          command: cd << parameters.project-directory >> && bundle exec fastlane << parameters.lane >> << parameters.parameters >>

jobs:
  cat-fastlane:
    executor: ios
    parameters:
      parent-directory:
        type: string
      file:
        type: string
    environment:
      FASTLANE_FILE: <<pipeline.parameters.active-directory>><< parameters.parent-directory >><< parameters.file >>
    steps:
      - checkout
      - print:
          message: Printing << parameters.file >>
      - run: echo $FASTLANE_FILE
      - run: cat $FASTLANE_FILE
  run_fastlane_on_project:
    executor: ios
    parameters:
      project-directory:
        type: string
    steps:
      - run_fastlane_cmd:
          lane: unit_test
          project-directory: << parameters.project-directory >>

workflows:
  # debug-parameters-workflow:
  #   when: << pipeline.parameters.debug-workflow >>
  #   jobs:
  #     - cat-fastlane:
  #         file: /fastlane/Fastfile
  build-core:
    when: << pipeline.parameters.source-core-modified >>
    jobs:
      - cat-fastlane:
          parent-directory: IAR-CoreSDK-Sample/
          file: fastlane/Fastfile
      - run_fastlane_on_project:
          project-directory: IAR-CoreSDK-Sample/
          requires:
            - cat-fastlane
  build-surface:
    when: << pipeline.parameters.source-surface-modified >>
    jobs:
      - cat-fastlane:
          parent-directory: IAR-SurfaceSDK-Sample/
          file: fastlane/Fastfile
      - run_fastlane_on_project:
          project-directory: IAR-SurfaceSDK-Sample/
          requires:
            - cat-fastlane
# # Config



# commands:


#       # - when:
#       #     condition: << parameters.distributes >>
#       #     steps:
#       #       - run:
#       #           name: Decode Certificates
#       #           command: base64 -D -o Certificates.p12 \<<< $Certificates && ls -lha
#       #       - run:
#       #           name: Decode Certificates
#       #           command: base64 -D -o DevCertificates.p12 \<<< $DevCertificates && ls -lha
#       #       - run:
#       #           name: Rebuild Provisioning Profiles directory
#       #           command: mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
#       #       - run:
#       #           name: Decode Provisioning Profiles (Distribution)
#       #           command: base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/CoreDistribution.mobileprovision \<<< $CoreDistributionProfile && ls -lha
#       #       - run:
#       #           name: Decode Provisioning Profiles (Development)
#       #           command: base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/CoreDevelopment.mobileprovision \<<< $DevProfile && ls -lha

#       # Fastlane
#       - run:
#           name: Fastlane
#           command: cd IAR-CoreSDK-Sample && bundle exec fastlane << parameters.lane >> << parameters.parameters >>
#           no_output_timeout: 30m

#       # Artifacts
#       - store_test_results:
#           path: output/scan
#       - store_artifacts:
#           path: "./fastlane/test_output"
#       - store_artifacts:
#           path: ~/Library/Logs/scan
#           destination: scan-logs
#       - store_artifacts:
#           path: logs
#       - store_artifacts:
#           path: culprits.txt

# jobs:
#   unit_test:
#     executor: ios
#     steps:
#       - run_lane:
#           lane: unit_test
#           distributes: false
#   adhoc-beta:
#     executor: ios
#     steps:
#       - run_lane:
#           lane: adhoc
#           distributes: true

# workflows:
#   # nightly:
#   #   triggers:
#   #     - schedule:
#   #         cron: "0 8 * * *" # every day at 8am UTC (3am CDT)
#   #         <<: *filter_master_branch_only
#   #   jobs:
#   #     - upload-dsyms

#   # nightly-staging:
#   #   triggers:
#   #     - schedule:
#   #         cron: "0 8 * * *" # every day at 8am UTC (3am CDT)
#   #         <<: *filter_staging_branch_only
#   #   jobs:
#   #     - ui_test

#   auto_unit_test:
#     jobs:
#       - unit_test

#   # auto_beta:
#   #   jobs:
#       # - enterprise-beta:
#       #     <<: *filter_beta_branches_only

#   hold_beta:
#     jobs:
#       # Approvals
#       - adhoc:
#           type: approval
#       - adhoc-beta:
#           requires:
#             - adhoc
